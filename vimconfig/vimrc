""""""""""""""""""""""""""""""""""""""""""""
"               Bundle List                "
""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                " be iMproved
filetype off                    " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle "gmarik/vundle"

Bundle 'winmanager'
Bundle 'EasyGrep'

Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'jimenezrick/vimerl'
Bundle 'Valloric/YouCompleteMe'
Bundle 'scrooloose/nerdcommenter'
Bundle 'toupeira/vim-desertink'
Bundle "tpope/vim-fugitive"
Bundle "jlanzarotta/bufexplorer"
Bundle "jistr/vim-nerdtree-tabs"
Bundle "easymotion/vim-easymotion"
Bundle "taglist.vim"

" Bundle 'scrooloose/syntastic'

"""""""""""""""""""""""""""""""""""""""""""""
"               在行末显示空格              "
"""""""""""""""""""""""""""""""""""""""""""""
" show tabs and spaces at the end of line
set list
set listchars=""
if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
    set listchars=tab:»\ 
    set listchars+=trail:·
    "set listchars+=eol:¶
else
    set listchars=tab:>\ 
    set listchars+=trail:.
    "set listchars+=eol:~
endif

" set indent for diff lang {
autocmd FileType erlang       set shiftwidth=2 | set expandtab
autocmd FileType python       set shiftwidth=4 | set expandtab
autocmd FileType c            set shiftwidth=4 | set expandtab
autocmd FileType cpp          set shiftwidth=4 | set expandtab
autocmd FileType lua          set shiftwidth=4 | set expandtab
" }


"""""""""""""""""""""""""""""""""""""""""""""
"               基本配置                    "
"""""""""""""""""""""""""""""""""""""""""""""
" 设置主题
syntax enable
set background=dark
colorscheme desertink
" 开启语法高亮
syntax on
" 忽略输入错误的警告声
set noeb
" 按照文件类型自动缩进
set ts=4
set sw=4
filetype indent plugin on
" 括号自动补全
" inoremap ( ()<ESC>i
" inoremap { {}<ESC>i
" inoremap [ []<ESC>i
" inoremap < <><ESC>i
" 关于中文显示
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
" 搜索相关 忽略大小写 高亮
set ignorecase
set hlsearch
set incsearch
" 显示当前行号列号
set ruler
" 左侧显示行号
set number  
" 按F2显示/隐藏左侧行号显示
nnoremap <F2> : set nonumber!<CR>:set foldcolumn=0<CR>

"自动补全
set completeopt+=longest
autocmd InsertLeave * if pumvisible() == 0 | pclose | endif
"上下左右选择补全
inoremap<expr><CR> pumvisible() ? "\<C-y>":"\<CR>"
inoremap<expr><Down> pumvisible() ? "\<C-n>":"\<Down>"
inoremap<expr><Up> pumvisible() ? "\<C-p>":"\<Up>"
inoremap<expr><PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>":"\<PageDown>"
inoremap<expr><PageUp> pumvisible() ? "\<PageUp>\<C-p>\<C-n>":"\<PageUp>"

" for nerocommentor
let g:mapleader=";"

" EasyMotion
nmap s <Plug>(easymotion-overwin-f2)
let g:EasyMotion_smartcase = 1
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <leader>h <Plug>(easymotion-linebackward)
map <leader>l <Plug>(easymotion-lineforward)

" 共享剪贴板
set clipboard=unnamed

" 快速切换Panel
nmap <Tab> <C-w>w
nmap <c-h> <c-w><c-h>
nmap <c-j> <c-w><c-j>
nmap <c-k> <c-w><c-k>
nmap <c-l> <c-w><c-l>


"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   方便编译                      "
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <F5> :call CompileAbout()<CR>
func! CompileAbout()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'sh'
        :!./%
    endif
endfunc


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  erlang相关设置                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType erlang setlocal et sta sw=2 sts=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       taglist设置                         "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let Tlist_Auto_Open=1 " 自动打开taglist
let Tlist_Show_One_File=1 " 不同时显示多个文件的tag 只显示当前文件的
let Tlist_Exit_OnlyWindow=1 " 如果taglist窗口是最后一个窗口 则退出vim
"let Tlist_Use_Right_Window=1 " 在右侧窗口显示taglist
let Tlist_Show_One_File=1    "只显示当前文件的tags
let Tlist_Exit_OnlyWindow=1  "tagList窗口是最后一个窗口，则退出Vim
map <F7> :! ctags -R <CR>
"map <F8> :! ctags -R --languages=c++,erlang,lua<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   ctrlp                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"'c' - the directory of the current file.
"'a' - the directory of the current file, unless it is a subdirectory of the cwd
"'r' - the nearest ancestor of the current file that contains one of these directories or files: .git .hg .svn .bzr _darcs
"'w' - modifier to "r": start search from the cwd instead of the current file's directory
"0 or '' (empty string) - disable this feature.
let g:ctrlp_working_path_mode = 'wa'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   nerdcommenter                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                      ctags                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设定Ctags路径
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
" 自动加载当前目录tags文件
if has("ctags")
    if filereadable("tags")
        set tags=tags
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       cscope                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <C-n> :cnext<CR>
nmap <C-p> :cprev<CR>
let g:Cscope_OpenQuickfixWindow=1

" 1或者g  —— 查找这个定义
" 2或者d  —— 查找被这个函数调用的函数（们）
" 3或者c  —— 查找调用这个函数的函数（们）
" 4或者t   —— 查找这个字符串
" 6或者e  —— 查找这个egrep匹配模式
" 7或者f   —— 查找这个文件
" 8或者i   —— 查找#include这个文件的文件（们）
"nnoremap fs :cs find s <C-R>=expand("<cword>")<CR><CR>
"nnoremap fg :cs find g <C-R>=expand("<cword>")<CR><CR>
"nnoremap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
"nnoremap ft :cs find t <C-R>=expand("<cword>")<CR><CR>
"nnoremap fe :cs find e <C-R>=expand("<cword>")<CR><CR>
"nnoremap ff :cs find f <C-R>=expand("<cword>")<CR><CR>
"nnoremap fi :cs find i <C-R>=expand("<cword>")<CR><CR>
"nnoremap fd :cs find d <C-R>=expand("<cword>")<CR><CR>

" 自动加载当前目录下的cscope.out
if has("cscope")
  set csprg=/usr/local/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
endif

map <F8> :! cscope -Rbq <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   winmanager设置                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" winmanager 管理NERDTree 和 BufExplorer 两个窗口 位于左侧
let g:NERDTree_title='NERD Tree'
let g:winManagerWindowLayout='NERDTree|TagList'

" 辅助打开 NERDTree
function! NERDTree_Start()
   exec 'NERDTree'
endfunction

function! NERDTree_IsValid()
    return 1
endfunction

nmap wm : WMToggle<CR> :set buftype=<cr> " 打开winmanager的按键wm
let g:winManagerWidth = 35 " winmanager宽度 默认为25

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   插件A                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Ctrl+j+p键实现头/源文件之间跳转  
"  nnoremap <c-j><c-p> :A<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   文件跳转                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <c-b> :e #<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   NERDTree                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map wm :NERDTreeToggle<CR> 

" 关闭兼容模式
set nocompatible
set bs=2


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       syntastic                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

nnoremap <leader>df :YcmCompleter GoToDefinition<CR>
nnoremap <leader>dc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>de :YcmCompleter GoToDefinitionElseDeclaration<CR>

nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F6> :YcmDiags<CR>

